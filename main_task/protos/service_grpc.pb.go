// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberStreamClient is the client API for NumberStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberStreamClient interface {
	Connect(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*Empty, error)
	StartStream(ctx context.Context, in *StartStreamMessage, opts ...grpc.CallOption) (NumberStream_StartStreamClient, error)
}

type numberStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberStreamClient(cc grpc.ClientConnInterface) NumberStreamClient {
	return &numberStreamClient{cc}
}

func (c *numberStreamClient) Connect(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.NumberStream/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberStreamClient) StartStream(ctx context.Context, in *StartStreamMessage, opts ...grpc.CallOption) (NumberStream_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &NumberStream_ServiceDesc.Streams[0], "/protos.NumberStream/StartStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberStreamStartStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NumberStream_StartStreamClient interface {
	Recv() (*Number, error)
	grpc.ClientStream
}

type numberStreamStartStreamClient struct {
	grpc.ClientStream
}

func (x *numberStreamStartStreamClient) Recv() (*Number, error) {
	m := new(Number)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberStreamServer is the server API for NumberStream service.
// All implementations must embed UnimplementedNumberStreamServer
// for forward compatibility
type NumberStreamServer interface {
	Connect(context.Context, *LoginMessage) (*Empty, error)
	StartStream(*StartStreamMessage, NumberStream_StartStreamServer) error
	mustEmbedUnimplementedNumberStreamServer()
}

// UnimplementedNumberStreamServer must be embedded to have forward compatible implementations.
type UnimplementedNumberStreamServer struct {
}

func (UnimplementedNumberStreamServer) Connect(context.Context, *LoginMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedNumberStreamServer) StartStream(*StartStreamMessage, NumberStream_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedNumberStreamServer) mustEmbedUnimplementedNumberStreamServer() {}

// UnsafeNumberStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberStreamServer will
// result in compilation errors.
type UnsafeNumberStreamServer interface {
	mustEmbedUnimplementedNumberStreamServer()
}

func RegisterNumberStreamServer(s grpc.ServiceRegistrar, srv NumberStreamServer) {
	s.RegisterService(&NumberStream_ServiceDesc, srv)
}

func _NumberStream_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberStreamServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.NumberStream/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberStreamServer).Connect(ctx, req.(*LoginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberStream_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartStreamMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumberStreamServer).StartStream(m, &numberStreamStartStreamServer{stream})
}

type NumberStream_StartStreamServer interface {
	Send(*Number) error
	grpc.ServerStream
}

type numberStreamStartStreamServer struct {
	grpc.ServerStream
}

func (x *numberStreamStartStreamServer) Send(m *Number) error {
	return x.ServerStream.SendMsg(m)
}

// NumberStream_ServiceDesc is the grpc.ServiceDesc for NumberStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.NumberStream",
	HandlerType: (*NumberStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _NumberStream_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStream",
			Handler:       _NumberStream_StartStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
